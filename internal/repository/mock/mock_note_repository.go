// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MuhahaSam/golangPractice/internal/repository (interfaces: NoteRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/MuhahaSam/golangPractice/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockNoteRepositoryInterface is a mock of NoteRepositoryInterface interface.
type MockNoteRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryInterfaceMockRecorder
}

// MockNoteRepositoryInterfaceMockRecorder is the mock recorder for MockNoteRepositoryInterface.
type MockNoteRepositoryInterfaceMockRecorder struct {
	mock *MockNoteRepositoryInterface
}

// NewMockNoteRepositoryInterface creates a new mock instance.
func NewMockNoteRepositoryInterface(ctrl *gomock.Controller) *MockNoteRepositoryInterface {
	mock := &MockNoteRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepositoryInterface) EXPECT() *MockNoteRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNoteRepositoryInterface) Create(arg0 context.Context, arg1 *model.NoteEntity) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNoteRepositoryInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockNoteRepositoryInterface) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNoteRepositoryInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockNoteRepositoryInterface) Get(arg0 context.Context, arg1 string) (*model.NoteEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.NoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNoteRepositoryInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockNoteRepositoryInterface) Update(arg0 context.Context, arg1 string, arg2 *model.NoteUpdateBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteRepositoryInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).Update), arg0, arg1, arg2)
}
